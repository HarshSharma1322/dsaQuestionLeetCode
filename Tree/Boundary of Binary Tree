class Solution {
public:
    bool isLeaf(Node *root){
         if(root->left==NULL && root->right==NULL){
             return  true;
         }
         return false;
    }
    
    void addLeftBoundary(Node *root, vector<int>&res){
        Node *curr=root->left;
        while(curr){
            if(!isLeaf(curr)) res.push_back(curr->data);
            if(curr->left){
                curr=curr->left;
            }
            else{
                curr=curr->right;
            }
        }
    }
    
    void addLeaveNode(Node *root, vector<int>&res){
        if(isLeaf(root)){
            res.push_back(root->data);
            return;
        }
        if(root->left)addLeaveNode(root->left,res);
        if(root->right)addLeaveNode(root->right,res);
    }
    
    void addRightBoundary(Node *root, vector<int> &res){
        stack<int>st;
        Node *curr= root->right;
        
        while(curr){
            if(!isLeaf(curr)) st.push(curr->data);
            if(curr->right){
                curr=curr->right;
            }
            else{
                curr=curr->left;
            }
        }
        while(!st.empty()){
            res.push_back(st.top());
            st.pop();
        }
    }

    vector <int> boundary(Node *root)
    {
        vector<int>res;
        if(root==NULL) return res;
        if(!isLeaf(root)) res.push_back(root->data);
        addLeftBoundary(root,res);
        addLeaveNode(root,res);
        addRightBoundary(root,res);
        return res;
    }
};
