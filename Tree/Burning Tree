class Solution {
  public:
  Node *FindNode(Node *root, int target){
      if(root==NULL || root->data== target) return root;
      
      Node *left=FindNode(root->left,target);
      Node *right=FindNode(root->right,target);
      
      if(left) return left;
      else if(right) return right;
  }
  
  void makeParent(Node*root,unordered_map<Node *, Node *>&parent){
      queue<Node *>q;
      q.push(root);
      while(!q.empty()){
          Node *curr=q.front();
          q.pop();
          
          if(curr->left){
              parent[curr->left]=curr;
              q.push(curr->left);
          }
          if(curr->right){
              parent[curr->right]=curr;
              q.push(curr->right);
          }
      }
  }
    int minTime(Node* root, int target) 
    {
        Node *targetNode=FindNode(root,target);
        unordered_map<Node *, Node *>mpp;
        makeParent(root,mpp);
        queue<Node *>q;
        q.push(targetNode);
        unordered_map<Node *,bool>vis;
        int maxi=0;
        
        vis[targetNode]=true;
        while(!q.empty()) {
            int sz = q.size();
            int fl = 0; 
            for(int i = 0;i<sz;i++) {
                auto node = q.front();
                q.pop();
                if(node->left && !vis[node->left]) {
                    fl = 1; 
                    vis[node->left] = 1; 
                    q.push(node->left); 
                }
                if(node->right && !vis[node->right]) {
                    fl = 1; 
                    vis[node->right] = 1; 
                    q.push(node->right); 
                }
                
                if(mpp[node] && !vis[mpp[node]]) {
                    fl = 1; 
                    vis[mpp[node]] = 1; 
                    q.push(mpp[node]); 
                } 
            }
            if(fl) maxi++; 
        }
        return maxi; 
    }
};
