    bool isSafe(int row, int col, vector<vector<int>>&board){
        for(int i=row, j=col; i>=0&&j>=0; i--,j--){
            if(board[i][j]==1) return false;
        }
        for(int i=row, j=col; i>=0&&j>=0; i,j--){
            if(board[i][j]==1) return false;
        }
        for(int i=row, j=col; i<board.size()&&j>=0; i++,j--){
            if(board[i][j]==1) return false;
        }
        return true;
    }

    void NQueen(vector<vector<int>>&ans,vector<int>&ds,vector<vector<int>>&board,int col){
        if(col==board.size()){
            ans.push_back(ds);
            return;
        }
        
        for(int row=0; row<board.size(); row++){
            if(isSafe(row,col,board)){
                ds.push_back(row+1);
                board[row][col]=1;
                NQueen(ans,ds,board,col+1);
                ds.pop_back();
                board[row][col]=0;
            }
        }
    }
    vector<vector<int>> nQueen(int n) {
        vector<vector<int>>ans;
        vector<int>ds;
        vector<vector<int>> board(n,vector<int>(n,0));
        NQueen(ans,ds,board,0);
        return ans;
    }
